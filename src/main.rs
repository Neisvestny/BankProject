use std::io::prelude::*;
use std::{io, thread::sleep, time::Duration};

struct Card {
    number: String,
    pin_code: u16,
    cvv_cvc: u16,
    balance: f64,
    error_pin: u8,
    blocked: bool,
}

impl Card {
    fn new(number: String, pin_code: u16, cvv_cvc: u16, balance: f64) -> Self {
        Self {
            number,
            pin_code,
            cvv_cvc,
            balance,
            error_pin: 0,
            blocked: false,
        }
    }
}

fn main() {
    let mut cards = create_cards();
    println!("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏");
    println!("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏        PIN-–∫–æ–¥   CVV/CVC   –ë–∞–ª–∞–Ω—Å");
    for card in &cards {
        println!(
            "{}   {}      {}       {}",
            card.number, card.pin_code, card.cvv_cvc, card.balance
        );
    }
    'programm: loop {
        println!();
        println!("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª—É—á—à–∏–π –∏–Ω—Ñ–æ–∫–∏–æ—Å–∫ –º–∏—Ä–∞!");
        println!("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å:");
        println!("1. –û–ø–µ—Ä–∞—Ü–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π");
        println!("2. –û–ø–µ—Ä–∞—Ü–∏—è —Å –Ω–∞–ª–∏—á–∫–æ–π");
        println!("3. –í—ã–∫–ª—é—á–∏—Ç—å –±–∞–Ω–∫–æ–º–∞—Ç");

        let input: u32 = read_line().trim().parse().expect("Error");
        match input {
            1 => 'card_operation: loop {
                println!();
                std::process::Command::new("cls");
                println!("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å, –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXX-XXXX-XXXX-XXXX");
                let card_number = read_line();

                let index_card = find_card(&cards, card_number);
                if index_card == cards.len() {
                    println!("–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É!");
                } else if cards[index_card].blocked {
                    println!("–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!");
                } else {
                    let card = &mut cards[index_card];
                    'input_pincode: loop {
                        println!();
                        println!(
                            "–í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥ –æ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {} –ø–æ–ø—ã—Ç–∫–∏.",
                            3 - &card.error_pin
                        );
                        let pin: u16 = read_line().trim().parse().expect("Error");

                        if pin != card.pin_code {
                            card.error_pin += 1;
                        } else {
                            break 'input_pincode;
                        }

                        if card.error_pin == 3 {
                            println!("–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª-–≤–æ –≤–≤–æ–¥–∞ PIN-–∫–æ–¥–∞! –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!");
                            card.blocked = true;
                            break;
                        }
                    }

                    loop {
                        println!();
                        if card.blocked {
                            break;
                        }
                        println!("–ö–∞–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å?");
                        println!("1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å");
                        println!("2. –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é");
                        let card_option: u32 = read_line().trim().parse().expect("Error");
                        match card_option {
                            1 => {
                                println!("–ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {}BYN", card.balance);
                            }
                            2 => {
                                break 'card_operation;
                            }
                            _ => println!("–¢–∞–∫–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–µ—Ç..."),
                        }
                        println!();
                    }
                }
            },
            2 => println!(
                "–í–æ—Ç —Å–∫–∞–∂–∏ –º–Ω–µ, —Ç—ã –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π?! –¢—ã –Ω–∞–ª–∏—á–∫—É –∫—É–¥–∞ –ø–∏—Ö–∞—Ç—å –±—É–¥–µ—à—å??? –í –¥–∏—Å–∫–æ–≤–æ–¥???"
            ),
            3 => loop {
                println!();
                println!("–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–∞–Ω–∫–æ–º–∞—Ç–∞ –æ—Ç 1 –¥–æ 10, –≥–¥–µ 1 - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ, –∞ 10 - —Å–Ω–æ–≥—Å—à–∏–±–∞—Ç–µ–ª—å–Ω–æ");
                let mark = read_line().trim().parse::<u8>().expect("Error");
                match mark {
                    1..=4 => {
                        println!("–Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ç–µ–±—è -,-\n–ù—É –∏ –≤–∞–ª–∏ –æ—Ç—Å—é–¥–∞");
                        sleep(Duration::from_millis(3500));
                        break 'programm;
                    }
                    5..=7 => {
                        println!("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–æ—á–∫—Éüòä. –ù–∞–¥–µ—é—Å—å, —É–≤–∏–¥–∏–º –≤–∞—Å —Å–Ω–æ–≤–∞");
                        sleep(Duration::from_millis(3500));
                        break 'programm;
                    }
                    8..=10 => {
                        println!("–í—ã —Ç–æ–∂–µ –±—ã–ª–∏ –æ—Ç–ª–∏—á–Ω—ã–º –∫–∏–µ–Ω—Ç–æ–º, –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –±—É–¥–µ–º –∂–¥–∞—Ç—å! üòò");
                        sleep(Duration::from_millis(3500));
                        break 'programm;
                    }
                    _ => println!("–¢–∞–∫–æ–π –æ—Ü–µ–Ω–∫–∏ –Ω–µ—Ç..."),
                }
            },
            _ => println!("–¢–∞–∫–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–µ—Ç..."),
        }
    }
}

fn create_cards() -> [Card; 3] {
    let card1 = Card::new(String::from("1111-1111-1111-1111"), 1234, 123, 145.27);
    let card2 = Card::new(String::from("2222-2222-2222-2222"), 2345, 234, 256.38);
    let card3 = Card::new(String::from("3333-3333-3333-3333"), 3456, 345, 367.49);
    [card1, card2, card3]
}

fn find_card(cards: &[Card], number: String) -> usize {
    let mut index = cards.len();
    for i in 0..cards.len() {
        if (cards[i].number).trim() == number.trim() {
            index = i;
        }
    }
    index
}

fn read_line() -> String {
    let mut input = String::new();
    print!(">>> ");
    io::stdout().flush().ok().expect("Error");
    io::stdin().read_line(&mut input).expect("Error");
    input
}
